heat_template_version: 2014-10-16

description: >
  Build network, admin access requirements inside an empty tenant and deploy an Application
  Use noport_computor.yaml instead of this one if you meet some SDN issues

resources:
  random:
    type: OS::Heat::RandomString
    properties:
      length: 6
      sequence: lettersdigits

  network:
    depends_on: [ random ]
    type: OS::Neutron::Net
    properties:
      admin_state_up: True
      name:
        str_replace:
          template: ctx%ress%-rand%
          params:
            "ctx%": {get_param: context}
            "ress%": "net"
            "rand%": { get_attr: [random, value] }
      shared: False

  subnet:
    type: OS::Neutron::Subnet
    depends_on: [ network ]
    properties:
      name:
        str_replace:
          template: ctx%ress%-rand%
          params:
            "ctx%": {get_param: context}
            "ress%": "subnet"
            "rand%": { get_attr: [random, value] }
      cidr: {get_param: subnet_cidr}
      network: {get_resource: network}
      allocation_pools: [{"start" : {get_param: subnet_start}, "end" : {get_param: subnet_end}}]
      dns_nameservers: {get_param: dns_nameservers}
      enable_dhcp: True
      gateway_ip: {get_param: gateway_ip}
      ip_version: 4

  router:
    type: OS::Neutron::Router
    depends_on: [ subnet ]
    properties:
      name:
        str_replace:
          template: ctx%ress%-rand%
          params:
            "ctx%": {get_param: context}
            "ress%": "router"
            "rand%": { get_attr: [random, value] }
      admin_state_up: True
      external_gateway_info: {"network": {get_param: floatingip_network_name}}

  interface:
    type: OS::Neutron::RouterInterface
    depends_on: [ router ]
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: subnet }

  computor_securitygroup:
      depends_on: [ random ]
      type: OS::Neutron::SecurityGroup
      properties:
        name:
          str_replace:
            template: ctx%ress%-rand%
            params:
              "ctx%": {get_param: context}
              "ress%": "computor"
              "rand%": { get_attr: [random, value] }
        rules:
          - remote_ip_prefix: {get_param: subnet_cidr}
            protocol: tcp
            port_range_min: 22
            port_range_max: 22
            direction: ingress
          - remote_ip_prefix: {get_param: subnet_cidr}
            protocol: tcp
            port_range_min: 80
            port_range_max: 80
            direction: ingress
          - remote_ip_prefix: {get_param: subnet_cidr}
            protocol: icmp
            direction: ingress

  bastion_securitygroup:
      depends_on: [ random ]
      type: OS::Neutron::SecurityGroup
      properties:
        name:
          str_replace:
            template: ctx%ress%-rand%
            params:
              "ctx%": {get_param: context}
              "ress%": "bastion"
              "rand%": { get_attr: [random, value] }
        rules:
          - remote_ip_prefix: 0.0.0.0/0
            protocol: tcp
            port_range_min: 22
            port_range_max: 22
            direction: ingress
          - remote_ip_prefix: 0.0.0.0/0
            protocol: icmp
            direction: ingress

  computor_anti:
    depends_on: [ random ]
    type: OS::Nova::ServerGroup
    properties:
      name:
        str_replace:
          template: ctx%ress%-rand%
          params:
            "ctx%": {get_param: context}
            "ress%": "computor"
            "rand%": { get_attr: [random, value] }
      policies: ["anti-affinity"] # Beware about the number of compute nodes

  bastion_anti:
    depends_on: [ random ]
    type: OS::Nova::ServerGroup
    properties:
      name:
        str_replace:
          template: ctx%ress%-rand%
          params:
            "ctx%": {get_param: context}
            "ress%": "bastion"
            "rand%": { get_attr: [random, value] }
      policies: ["anti-affinity"] # Beware about the number of compute nodes

  bastion_group:
    depends_on: [ interface, bastion_securitygroup, bastion_userdata ]
    type: OS::Heat::ResourceGroup
    properties:
      count: 1
      resource_def:
        type: "lib::FIPInstance"
        properties:
          key_name: { get_param: key_name }
          security_group: { get_resource: bastion_securitygroup }
          network: { get_resource: network }
          subnet: { get_resource: subnet }
          userdata: { get_resource: bastion_userdata }
          flavor: { get_param: flavor }
          image: { get_param: image }
          floatingip_network_name: { get_param: floatingip_network_name }
          instance_basename:
            str_replace:
              template: ctx%rand%-ress%-%index%
              params:
                "ctx%": {get_param: context}
                "ress%": "bastion"
                "rand%": { get_attr: [random, value] }

  pool:
    depends_on: [ subnet ]
    type: OS::Neutron::Pool
    properties:
      protocol: HTTP
      subnet_id: {get_resource: subnet}
      lb_method: ROUND_ROBIN
      vip:
        protocol_port: 80

  lb:
    depends_on: [ pool ]
    type: OS::Neutron::LoadBalancer
    properties:
      protocol_port: 80
      pool_id: {get_resource: pool}

  lb_floating:
    depends_on: [ pool ]
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: floatingip_network_name }
      port_id: {get_attr: [pool, vip, port_id]}

  computor_group:
    depends_on: [ interface, computor_anti, computor_securitygroup, computor_userdata, pool ]
    type: OS::Heat::AutoScalingGroup
    properties:
      min_size: 2
      max_size: 6
      rolling_updates: {"max_batch_size": 1, "min_in_service": 2, "pause_time": 60}
      resource:
        type: "lib::LBInstance"
        properties:
          key_name: { get_param: key_name }
          anti_affinity: { get_resource: computor_anti }
          security_group: { get_resource: computor_securitygroup }
          network: { get_resource: network }
          subnet: { get_resource: subnet }
          userdata: { get_resource: computor_userdata }
          flavor: { get_param: flavor }
          image: { get_param: image }
          pool_id: {get_resource: pool}
          instance_basename:
            str_replace:
             template: ctx%rand%-ress%
             params:
               "ctx%": {get_param: context}
               "rand%": { get_attr: [random, value] }
               "ress%": "computor"

  scale_up:
    depends_on: [ computor_group ]
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: computor_group}
      cooldown: 30
      scaling_adjustment: 1

  scale_down:
    depends_on: [ computor_group ]
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: computor_group}
      cooldown: 30
      scaling_adjustment: -1

  computor_userdata:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        runcmd:
          - [ echo, "START" ]
          - until curl -s google.com; do sleep 30; done
          - [ apt-get, update, -qq]
          - [ apt-get, upgrade, -qqy]
          - [ curl, { get_param: app_install }, -o, /tmp/app_install.sh ]
          - [ curl, { get_param: app_launch }, -o, /tmp/app_launch.sh ]
          - [ chmod, 755, /tmp/app_install.sh]
          - [ chmod, 755, /tmp/app_launch.sh]
          - [ /tmp/app_install.sh ]
          - [ /tmp/app_launch.sh ]
          - [ curl, localhost ]
          - [ echo, "END" ]

  bastion_userdata:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        runcmd:
          - [ echo, "hello_world" ]

parameters:
  context:
    type: string
    default: ""
  app_install:
    type: string
    label: Script for deploy the app with cloud-init
    description: Github script
    default: "https://raw.githubusercontent.com/JulienBalestra/computor/master/sysadmin/install.sh"
  app_launch:
    type: string
    label: Script for deploy the app with cloud-init
    description: Github script
    default: "https://raw.githubusercontent.com/JulienBalestra/computor/master/sysadmin/launch.sh"
  key_name:
    type: string
    label: Name of keypair to assign to servers
    description: key_name=foo
  subnet_cidr:
    type: string
    default: "192.168.1.0/24"
  subnet_start:
    type: string
    default: "192.168.1.100"
  subnet_end:
    type: string
    default: "192.168.1.200"
  gateway_ip:
    type: string
    default: "192.168.1.254"
  dns_nameservers:
    type: comma_delimited_list
    label: DNS nameservers
    description: dns_nameservers=8.8.8.8,8.8.4.4
  floatingip_network_name:
    type: string
    label: The Floating IP network for NAT
    description: floatingip_network_name=public
  flavor:
    type: string
    label: The flavor for Instances
    description: flavor=m1.medium
  image:
    type: string
    label: The debian image based for Instances
    description: image=debian-8-2016-01-01

outputs:
  scale_up:
    value:
      - {get_attr: [scale_up, alarm_url]}
  scale_down:
    value:
      - {get_attr: [scale_down, alarm_url]}
  lb_app:
    value:
      - { get_attr: [lb_floating, floating_ip_address] }
  base_name:
    description: Random value used to tag stack resources
    value:
      - { get_attr: [random, value] }