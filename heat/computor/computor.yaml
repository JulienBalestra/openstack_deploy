heat_template_version: 2014-10-16

description: >
  Build everything inside an empty tenant

resources:
  local_net:
    type: OS::Neutron::Net
    properties:
      admin_state_up: True
      name: 'local_net'
      shared: False

  local_sub:
    type: OS::Neutron::Subnet
    depends_on: [ local_net ]
    properties:
      name: "local_sub"
      cidr: {get_param: local_sub_cidr}
      network: {get_resource: local_net}
      allocation_pools: [{"start" : {get_param: local_sub_start}, "end" : {get_param: local_sub_end}}]
      dns_nameservers: {get_param: dns_nameservers}
      enable_dhcp: True
      gateway_ip: {get_param: local_gateway}
      ip_version: 4

  local_router:
    type: OS::Neutron::Router
    depends_on: [ local_sub ]
    properties:
      name: local_router
      admin_state_up: True
      external_gateway_info: {"network": {get_param: floatingip_network_name}}

  local_inet:
    type: OS::Neutron::RouterInterface
    depends_on: [ local_router ]
    properties:
      router_id: { get_resource: local_router }
      subnet: { get_resource: local_sub }

  computor_sg:
      type: OS::Neutron::SecurityGroup
      properties:
        name: 'computor'
        rules:
          - remote_ip_prefix: {get_param: local_sub_cidr}
            protocol: tcp
            port_range_min: 22
            port_range_max: 22
            direction: ingress
          - remote_ip_prefix: {get_param: local_sub_cidr}
            protocol: tcp
            port_range_min: 80
            port_range_max: 80
            direction: ingress
          - remote_ip_prefix: {get_param: local_sub_cidr}
            protocol: icmp
            direction: ingress

  bastion_sg:
      type: OS::Neutron::SecurityGroup
      properties:
        name: 'bastion'
        rules:
          - remote_ip_prefix: 0.0.0.0/0
            protocol: tcp
            port_range_min: 22
            port_range_max: 22
            direction: ingress
          - remote_ip_prefix: 0.0.0.0/0
            protocol: icmp
            direction: ingress

  computor_anti:
    type: OS::Nova::ServerGroup
    properties:
      name: computor_anti
      policies: ["anti-affinity"] # Beware about the number of compute nodes

  bastion_anti:
    type: OS::Nova::ServerGroup
    properties:
      name: bastion_anti
      policies: ["anti-affinity"] # Beware about the number of compute nodes

  bastion_group:
    depends_on: [ local_inet, bastion_anti, bastion_sg, bastion_userdata ]
    type: OS::Heat::ResourceGroup
    properties:
      count: 1
      resource_def:
        type: bastion_instance.yaml
        properties:
          key_name: { get_param: key_name }
          anti_affinity: { get_resource: bastion_anti }
          security_group: { get_resource: bastion_sg }
          local_net: { get_resource: local_net }
          local_sub: { get_resource: local_sub }
          userdata: { get_resource: bastion_userdata }
          flavor: { get_param: flavor }
          image: { get_param: image }
          floatingip_network_name: { get_param: floatingip_network_name }
          instance_name: bastion_%index%

  pool:
    depends_on: [ local_sub ]
    type: OS::Neutron::Pool
    properties:
      protocol: HTTP
      subnet_id: {get_resource: local_sub}
      lb_method: ROUND_ROBIN
      vip:
        protocol_port: 80

  lb:
    depends_on: [ pool ]
    type: OS::Neutron::LoadBalancer
    properties:
      protocol_port: 80
      pool_id: {get_resource: pool}

  lb_floating:
    depends_on: [ pool ]
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: floatingip_network_name }
      port_id: {get_attr: [pool, vip, port_id]}

  computor_scale:
    depends_on: [ local_inet, computor_anti, computor_sg, computor_userdata, pool ]
    type: OS::Heat::AutoScalingGroup
    properties:
      min_size: 2
      max_size: 10
      rolling_updates: {"max_batch_size": 1, "min_in_service": 2, "pause_time": 60}
      resource:
        type: computor_instance.yaml
        properties:
          key_name: { get_param: key_name }
          anti_affinity: { get_resource: computor_anti }
          security_group: { get_resource: computor_sg }
          local_net: { get_resource: local_net }
          local_sub: { get_resource: local_sub }
          userdata: { get_resource: computor_userdata }
          flavor: { get_param: flavor }
          image: { get_param: image }
          pool_id: {get_resource: pool}

  scale_up:
    depends_on: [ computor_scale ]
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: computor_scale}
      cooldown: 60
      scaling_adjustment: 1

  scale_down:
    depends_on: [ computor_scale ]
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: computor_scale}
      cooldown: 120
      scaling_adjustment: -1

  computor_userdata:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        runcmd:
          - until curl google.com 2>/dev/null ; do printf F ; sleep 30 ; done
          - [ apt-get, update, -qq]
          - [ apt-get, upgrade, -qqy]
          - [ curl, { get_param: app_install }, -o, /tmp/app_install.sh ]
          - [ chmod, 777, /tmp/app_install.sh]
          - [ /tmp/app_install.sh ]
          - [ curl, { get_param: app_launch }, -o, /tmp/app_launch.sh ]
          - [ chmod, 777, /tmp/app_launch.sh]
          - [ /tmp/app_launch.sh ]

  bastion_userdata:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        runcmd:
          - [ echo, "hello_world" ]

parameters:
  app_install:
    type: string
    label: Script for deploy the app with cloud-init
    description: Github script
    default: "https://raw.githubusercontent.com/JulienBalestra/computor/master/sysadmin/install.sh"
  app_launch:
    type: string
    label: Script for deploy the app with cloud-init
    description: Github script
    default: "https://raw.githubusercontent.com/JulienBalestra/computor/master/sysadmin/launch.sh"
  key_name:
    type: string
    label: Name of keypair to assign to servers
    description: key_name=foo
  local_sub_cidr:
    type: string
    default: "192.168.1.0/24"
  local_sub_start:
    type: string
    default: "192.168.1.100"
  local_sub_end:
    type: string
    default: "192.168.1.200"
  local_gateway:
    type: string
    default: "192.168.1.254"
  dns_nameservers:
    type: comma_delimited_list
    label: DNS nameservers
    description: dns_nameservers=8.8.8.8,8.8.4.4
  floatingip_network_name:
    type: string
    label: The Floating IP network for NAT
    description: floatingip_network_name=public
    default: "ext-net"
  flavor:
    type: string
    label: The flavor for Instances
    description: flavor=m1.medium
  image:
    type: string
    label: The debian image based for Instances
    description: image=debian-8-2016-01-01

outputs:
  scale_up:
    value:
      - {get_attr: [scale_up, alarm_url]}
  scale_down:
    value:
      - {get_attr: [scale_down, alarm_url]}
  lb_app:
    value:
      - { get_attr: [lb_floating, floating_ip_address] }