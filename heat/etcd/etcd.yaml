heat_template_version: 2014-10-16

description: >
  Build network, admin access requirements inside an empty tenant and deploy an Application

resources:
  random:
    type: OS::Heat::RandomString
    properties:
      length: 6
      sequence: lettersdigits

  etcd_key:
    type: OS::Heat::RandomString
    properties:
      length: 20
      sequence: lettersdigits

  network:
    depends_on: [ random ]
    type: OS::Neutron::Net
    properties:
      admin_state_up: True
      name:
        str_replace:
          template: ctx%ress%-rand%
          params:
            "ctx%": {get_param: context}
            "ress%": "net"
            "rand%": { get_attr: [random, value] }
      shared: False

  subnet:
    type: OS::Neutron::Subnet
    depends_on: [ network ]
    properties:
      name:
        str_replace:
          template: ctx%ress%-rand%
          params:
            "ctx%": {get_param: context}
            "ress%": "subnet"
            "rand%": { get_attr: [random, value] }
      cidr: {get_param: subnet_cidr}
      network: {get_resource: network}
      allocation_pools: [{"start" : {get_param: subnet_start}, "end" : {get_param: subnet_end}}]
      dns_nameservers: {get_param: dns_nameservers}
      enable_dhcp: True
      gateway_ip: {get_param: gateway_ip}
      ip_version: 4

  router:
    type: OS::Neutron::Router
    depends_on: [ subnet ]
    properties:
      name:
        str_replace:
          template: ctx%ress%-rand%
          params:
            "ctx%": {get_param: context}
            "ress%": "router"
            "rand%": { get_attr: [random, value] }
      admin_state_up: True
      external_gateway_info: {"network": {get_param: floatingip_network_name}}

  interface:
    type: OS::Neutron::RouterInterface
    depends_on: [ router ]
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: subnet }

  etcd_securitygroup:
      depends_on: [ random ]
      type: OS::Neutron::SecurityGroup
      properties:
        name:
          str_replace:
            template: ctx%ress%-rand%
            params:
              "ctx%": {get_param: context}
              "ress%": "etcd"
              "rand%": { get_attr: [random, value] }
        rules:
          - remote_ip_prefix: 0.0.0.0/0
            protocol: tcp
            port_range_min: 22
            port_range_max: 22
            direction: ingress
          - remote_ip_prefix: 0.0.0.0/0
            protocol: tcp
            port_range_min: 2379
            port_range_max: 2380
            direction: ingress
          - remote_ip_prefix: 0.0.0.0/0
            protocol: icmp
            direction: ingress

  bastion_securitygroup:
      depends_on: [ random ]
      type: OS::Neutron::SecurityGroup
      properties:
        name:
          str_replace:
            template: ctx%ress%-rand%
            params:
              "ctx%": {get_param: context}
              "ress%": "bastion"
              "rand%": { get_attr: [random, value] }
        rules:
          - remote_ip_prefix: 0.0.0.0/0
            protocol: tcp
            port_range_min: 22
            port_range_max: 22
            direction: ingress
          - remote_ip_prefix: 0.0.0.0/0
            protocol: icmp
            direction: ingress

  bastion_group:
    depends_on: [ interface, bastion_securitygroup, bastion_userdata ]
    type: OS::Heat::ResourceGroup
    properties:
      count: 0
      resource_def:
        type: "lib::FIPInstance"
        properties:
          key_name: { get_param: key_name }
          security_group: { get_resource: bastion_securitygroup }
          network: { get_resource: network }
          subnet: { get_resource: subnet }
          userdata: { get_resource: bastion_userdata }
          flavor: { get_param: flavor }
          image: { get_param: image }
          floatingip_network_name: { get_param: floatingip_network_name }
          instance_basename:
            str_replace:
              template: ctx%rand%-ress%-%index%
              params:
                "ctx%": {get_param: context}
                "ress%": "bastion"
                "rand%": { get_attr: [random, value] }

  etcd_discover:
    depends_on: [ interface, etcd_securitygroup ]
    type: "lib::EtcdDiscover"
    properties:
      key_name: { get_param: key_name }
      security_group: { get_resource: etcd_securitygroup }
      network: { get_resource: network }
      subnet: { get_resource: subnet }
      flavor: { get_param: flavor }
      image: { get_param: image }
      etcd_tar: {get_param: etcd_tar}
      insecure: {get_param: insecure}
      instance_basename:
        str_replace:
         template: ctx%rand%-ress%
         params:
           "ctx%": {get_param: context}
           "rand%": { get_attr: [random, value] }
           "ress%": "etcd_discover"
      etcd_target:
        str_replace:
         template: localhost:2379/v2/keys/discovery/__key__/_config/size
         params:
           "__key__": { get_attr: [etcd_key, value] }
      etcd_size:
        str_replace:
         template: value=__value__
         params:
           "__value__": {get_param: etcd_size}

  etcd_group:
    depends_on: [ etcd_userdata ]
    type: OS::Heat::AutoScalingGroup
    properties:
      min_size: 1
      desired_capacity: {get_param: etcd_size}
      max_size: 5
      rolling_updates: {"max_batch_size": 1, "min_in_service": 2, "pause_time": 60}
      resource:
        type: "lib::FIPInstance"
        properties:
          key_name: { get_param: key_name }
          security_group: { get_resource: etcd_securitygroup }
          network: { get_resource: network }
          subnet: { get_resource: subnet }
          userdata: { get_resource: etcd_userdata }
          flavor: { get_param: flavor }
          image: { get_param: image }
          floatingip_network_name: { get_param: floatingip_network_name }
          instance_basename:
            str_replace:
             template: ctx%rand%-ress%
             params:
               "ctx%": {get_param: context}
               "rand%": { get_attr: [random, value] }
               "ress%": "etcd"

  scale_up:
    depends_on: [ etcd_group ]
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: etcd_group}
      cooldown: 30
      scaling_adjustment: 1

  scale_down:
    depends_on: [ etcd_group ]
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: etcd_group}
      cooldown: 30
      scaling_adjustment: -1

  etcd_userdata:
    depends_on: [ etcd_discover ]
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        write_files:
          - path: /lib/systemd/system/etcd.service
            permissions: 0644
            content: |
              [Unit]
              Description=Service Discovery and KV store

              [Service]
              Environment="ETCD_NAME=%H"
              Environment="ETCD_DATA_DIR=/var/etcd/%H.etcd"
              Environment="ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380"
              Environment="ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379"
              Environment="ETCD_ADVERTISE_CLIENT_URLS=http://0.0.0.0:2379"
              ExecStart=/usr/local/bin/etcd

              [Install]
              WantedBy=multi-user.target
          - path: /tmp/register.sh
            permissions: 0555
            content:
              str_replace:
                params:
                  __etcd_ip__: { get_attr: [etcd_discover, nova, 0] }
                  __key__: { get_attr: [etcd_key, value] }
                template: |
                  #! /bin/bash
                  set -x
                  HOSTNAME=$(curl 169.254.169.254/1.0/meta-data/hostname)
                  LOCAL_IP=$(curl 169.254.169.254/1.0/meta-data/local-ipv4 | cut -d',' -f 1)

                  /usr/local/bin/etcd -name ${HOSTNAME} \
                  --data-dir /var/etcd/${HOSTNAME}.etcd \
                  -initial-advertise-peer-urls http://${LOCAL_IP}:2380 \
                  -listen-peer-urls http://${LOCAL_IP}:2380 \
                  -listen-client-urls http://${LOCAL_IP}:2379,http://127.0.0.1:2379 \
                  -advertise-client-urls http://${LOCAL_IP}:2379 \
                  -discovery http://__etcd_ip__:2379/v2/keys/discovery/__key__
                  # TODO manage the fork and restart the systemctl

        runcmd:
          #- apt-get update
          #- apt-get upgrade -y
          - set -x
          - apt-get install -y jq
          - mkdir /tmp/etcd_install || rm -Rf /tmp/etcd_install/*
          - [curl, -L, {get_param: insecure}, {get_param: etcd_tar}, -o, /tmp/etcd_install/etcd.tar.gz]
          - cd -P /tmp/etcd_install
          - tar -xzvf /tmp/etcd_install/etcd.tar.gz --strip-components=1
          - cp /tmp/etcd_install/etcd /usr/local/bin/etcd
          - cp /tmp/etcd_install/etcdctl /usr/local/bin/etcdctl
          - mkdir -p /var/etcd
          - systemctl daemon-reload
          - systemctl enable etcd.service
          - /tmp/register.sh

  bastion_userdata:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        runcmd:
          - [ echo, "hello_world" ]

parameters:
  context:
    type: string
    default: ""
  key_name:
    type: string
    label: Name of keypair to assign to servers
    description: key_name=foo
  subnet_cidr:
    type: string
    default: "192.168.1.0/24"
  subnet_start:
    type: string
    default: "192.168.1.100"
  subnet_end:
    type: string
    default: "192.168.1.200"
  gateway_ip:
    type: string
    default: "192.168.1.254"
  dns_nameservers:
    type: comma_delimited_list
    label: DNS nameservers
    description: dns_nameservers=8.8.8.8,8.8.4.4
  floatingip_network_name:
    type: string
    label: The Floating IP network for NAT
    description: floatingip_network_name=public
  flavor:
    type: string
    label: The flavor for Instances
    description: flavor=m1.medium
  image:
    type: string
    label: The debian image based for Instances
    description: image=debian-8-2016-01-01
  etcd_tar:
    type: string
    description: https://github.com/coreos/etcd/releases/version/arch.tar.gz
  insecure:
    type: string
    default: "--insecure"
    description: Warning with curl command for https
  etcd_size:
    type: number
    default: 3

outputs:
  scale_up:
    value:
      - {get_attr: [scale_up, alarm_url]}
  scale_down:
    value:
      - {get_attr: [scale_down, alarm_url]}
  base_name:
    description: Random value used to tag stack resources
    value:
      - { get_attr: [random, value] }