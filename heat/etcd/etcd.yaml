heat_template_version: 2014-10-16

description: >
  1) Build static cluster
  2) Build discovery over static with etcd proxy client
  3) Build vulcand over static with etcd proxy for discovery backend

resources:
  random:
    type: OS::Heat::RandomString
    properties:
      length: 4
      sequence: lettersdigits

  static_token:
    type: OS::Heat::RandomString
    properties:
      length: 20
      sequence: lettersdigits

  discovery_token:
    type: OS::Heat::RandomString
    properties:
      length: 20
      sequence: lettersdigits

  public_network:
    depends_on: [ random ]
    type: OS::Neutron::Net
    properties:
      admin_state_up: True
      name:
        str_replace:
          template: ctx%rand%-ress%
          params:
            "ctx%": {get_param: context}
            "ress%": "public_net"
            "rand%": { get_attr: [random, value] }
      shared: False

  static_network:
    depends_on: [ random ]
    type: OS::Neutron::Net
    properties:
      admin_state_up: True
      name:
        str_replace:
          template: ctx%rand%-ress%
          params:
            "ctx%": {get_param: context}
            "ress%": "static_net"
            "rand%": { get_attr: [random, value] }
      shared: False

  discovery_network:
    depends_on: [ random ]
    type: OS::Neutron::Net
    properties:
      admin_state_up: True
      name:
        str_replace:
          template: ctx%rand%-ress%
          params:
            "ctx%": {get_param: context}
            "ress%": "discovery_net"
            "rand%": { get_attr: [random, value] }
      shared: False

  public_subnet:
    type: OS::Neutron::Subnet
    depends_on: [ public_network ]
    properties:
      name:
        str_replace:
          template: ctx%rand%-ress%
          params:
            "ctx%": {get_param: context}
            "ress%": "public_subnet"
            "rand%": { get_attr: [random, value] }
      cidr: {get_param: public_subnet_cidr}
      network: {get_resource: public_network}
      allocation_pools: [{"start" : {get_param: public_subnet_start}, "end" : {get_param: public_subnet_end}}]
      dns_nameservers: {get_param: dns_nameservers}
      enable_dhcp: True
      gateway_ip: {get_param: public_gateway_ip}
      ip_version: 4
      host_routes:
        - destination: "0.0.0.0/0"
          nexthop: {get_param: public_gateway_ip}

  static_subnet:
    type: OS::Neutron::Subnet
    depends_on: [ static_network ]
    properties:
      name:
        str_replace:
          template: ctx%rand%-ress%
          params:
            "ctx%": {get_param: context}
            "ress%": "static_subnet"
            "rand%": { get_attr: [random, value] }
      cidr: {get_param: static_subnet_cidr}
      network: {get_resource: static_network}
      allocation_pools: [{"start" : {get_param: static_subnet_start}, "end" : {get_param: static_subnet_end}}]
      dns_nameservers: {get_param: dns_nameservers}
      enable_dhcp: True
      gateway_ip: {get_param: static_gateway_ip}
      ip_version: 4
      host_routes:
        - destination: "0.0.0.0/0"
          nexthop: {get_param: static_gateway_ip}

  discovery_subnet:
    type: OS::Neutron::Subnet
    depends_on: [ discovery_network ]
    properties:
      name:
        str_replace:
          template: ctx%rand%-ress%
          params:
            "ctx%": {get_param: context}
            "ress%": "discovery_subnet"
            "rand%": { get_attr: [random, value] }
      cidr: {get_param: discovery_subnet_cidr}
      network: {get_resource: discovery_network}
      allocation_pools: [{"start" : {get_param: discovery_subnet_start}, "end" : {get_param: discovery_subnet_end}}]
      dns_nameservers: {get_param: dns_nameservers}
      enable_dhcp: True
      gateway_ip: {get_param: discovery_gateway_ip}
      ip_version: 4
      host_routes:
        - destination: "0.0.0.0/0"
          nexthop: {get_param: discovery_gateway_ip}

  router:
    type: OS::Neutron::Router
    depends_on: [ random ]
    properties:
      name:
        str_replace:
          template: ctx%rand%-ress%
          params:
            "ctx%": {get_param: context}
            "ress%": "router"
            "rand%": { get_attr: [random, value] }
      admin_state_up: True
      external_gateway_info: {"network": {get_param: floatingip_network_name}}

  public_interface:
    type: OS::Neutron::RouterInterface
    depends_on: [ router, public_subnet ]
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: public_subnet }

  static_interface:
    type: OS::Neutron::RouterInterface
    depends_on: [ router, static_subnet ]
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: static_subnet }

  discovery_interface:
    type: OS::Neutron::RouterInterface
    depends_on: [ router, discovery_subnet ]
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: discovery_subnet }


  etcd_securitygroup:
      depends_on: [ random ]
      type: OS::Neutron::SecurityGroup
      properties:
        name:
          str_replace:
            template: ctx%ress%-rand%
            params:
              "ctx%": {get_param: context}
              "ress%": "static_etcd"
              "rand%": { get_attr: [random, value] }
        rules:
          - remote_ip_prefix: {get_param: public_subnet_cidr}
            protocol: tcp
            port_range_min: 22
            port_range_max: 22
            direction: ingress
          - remote_ip_prefix: {get_param: static_subnet_cidr}
            protocol: tcp
            port_range_min: 2379
            port_range_max: 2380
            direction: ingress
          - remote_ip_prefix: {get_param: discovery_subnet_cidr}
            protocol: tcp
            port_range_min: 2379
            port_range_max: 2380
            direction: ingress
          - remote_ip_prefix: {get_param: public_subnet_cidr}
            protocol: tcp
            port_range_min: 2379
            port_range_max: 2380
            direction: ingress
          - remote_ip_prefix: 0.0.0.0/0
            protocol: icmp
            direction: ingress

  vulcand_proxy_securitygroup:
      depends_on: [ random ]
      type: OS::Neutron::SecurityGroup
      properties:
        name:
          str_replace:
            template: ctx%ress%-rand%
            params:
              "ctx%": {get_param: context}
              "ress%": "vulcand_proxy"
              "rand%": { get_attr: [random, value] }
        rules:
          - remote_ip_prefix: {get_param: public_subnet_cidr }
            protocol: tcp
            port_range_min: 22
            port_range_max: 22
            direction: ingress
          - remote_ip_prefix: 0.0.0.0/0
            protocol: tcp
            port_range_min: 80
            port_range_max: 80
            direction: ingress
          - remote_ip_prefix: 0.0.0.0/0
            protocol: icmp
            direction: ingress

  bastion_securitygroup:
      depends_on: [ random ]
      type: OS::Neutron::SecurityGroup
      properties:
        name:
          str_replace:
            template: ctx%ress%-rand%
            params:
              "ctx%": {get_param: context}
              "ress%": "bastion"
              "rand%": { get_attr: [random, value] }
        rules:
          - remote_ip_prefix: 0.0.0.0/0
            protocol: tcp
            port_range_min: 22
            port_range_max: 22
            direction: ingress
          - remote_ip_prefix: 0.0.0.0/0
            protocol: icmp
            direction: ingress

  bastion_group:
    depends_on: [ public_interface, bastion_securitygroup, bastion_userdata ]
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: bastion_size }
      resource_def:
        type: "lib::FIPInstance"
        properties:
          key_name: { get_param: key_name }
          security_group: { get_resource: bastion_securitygroup }
          network: { get_resource: public_network }
          subnet: { get_resource: public_subnet }
          userdata: { get_resource: bastion_userdata }
          flavor: { get_param: flavor }
          image: { get_param: image }
          floatingip_network_name: { get_param: floatingip_network_name }
          instance_basename:
            str_replace:
              template: ctx%rand%-ress%-%index%
              params:
                "ctx%": {get_param: context}
                "ress%": "bastion"
                "rand%": { get_attr: [random, value] }

  etcd_static_anti:
    depends_on: [ random ]
    type: OS::Nova::ServerGroup
    properties:
      name:
        str_replace:
          template: ctx%ress%-rand%
          params:
            "ctx%": {get_param: context}
            "ress%": "etcd_static"
            "rand%": { get_attr: [random, value] }
      policies: ["anti-affinity"] # Beware about the number of compute nodes

  etcd_discovery_anti:
    depends_on: [ random ]
    type: OS::Nova::ServerGroup
    properties:
      name:
        str_replace:
          template: ctx%ress%-rand%
          params:
            "ctx%": {get_param: context}
            "ress%": "etcd_discovery"
            "rand%": { get_attr: [random, value] }
      policies: ["anti-affinity"] # Beware about the number of compute nodes

  vulcand_proxy_anti:
    depends_on: [ random ]
    type: OS::Nova::ServerGroup
    properties:
      name:
        str_replace:
          template: ctx%ress%-rand%
          params:
            "ctx%": {get_param: context}
            "ress%": "vulcand_proxy"
            "rand%": { get_attr: [random, value] }
      policies: ["anti-affinity"] # Beware about the number of compute nodes

  etcd_static_group:
    depends_on: [ static_interface, etcd_securitygroup, static_token, etcd_static_anti ]
    type: OS::Heat::ResourceGroup
    properties:
      count: 3
      resource_def:
        type: "EtcdStatic"
        properties:
          anti_affinity: { get_resource: etcd_static_anti }
          key_name: { get_param: key_name }
          security_group: { get_resource: etcd_securitygroup }
          network: { get_resource: static_network }
          subnet: { get_resource: static_subnet }
          flavor: { get_param: flavor }
          image: { get_param: image }
          index: "%index%"
          prefix: {get_param: static_prefix}
          insecure: {get_param: insecure}
          etcd_tar: {get_param: etcd_tar}
          token: { get_attr: [static_token, value] }
          instance_basename:
            str_replace:
              template: ctx%rand%-ress%-%index%
              params:
                "ctx%": {get_param: context}
                "ress%": "etcd_static"
                "rand%": { get_attr: [random, value] }
          static_endpoint:
            str_replace:
             template: __stn__0=http://__prefix__0:2380,__stn__1=http://__prefix__1:2380,__stn__2=http://__prefix__2:2380
             params:
               __stn__: {get_param: static_name}
               __prefix__: {get_param: static_prefix}

  etcd_discovery_group:
    depends_on: [ discovery_interface, etcd_static_group, discovery_token, etcd_discovery_anti ]
    type: OS::Heat::AutoScalingGroup
    properties:
      min_size: 3
      desired_capacity: { get_param: etcd_discovery_size }
      max_size: 5
      rolling_updates: {"max_batch_size": 1, "min_in_service": 1, "pause_time": 60}
      resource:
        type: "EtcdDiscovery"
        properties:
          anti_affinity: { get_resource: etcd_discovery_anti }
          key_name: { get_param: key_name }
          security_group: { get_resource: etcd_securitygroup }
          network: { get_resource: discovery_network }
          subnet: { get_resource: discovery_subnet }
          flavor: { get_param: flavor }
          image: { get_param: image }
          instance_basename:
            str_replace:
             template: ctx%rand%-ress%
             params:
               "ctx%": {get_param: context}
               "rand%": { get_attr: [random, value] }
               "ress%": "etcd_discovery"
          insecure: {get_param: insecure}
          etcd_tar: {get_param: etcd_tar}
          create_discovery:
            str_replace:
              template: http://127.0.0.1:8081/v2/keys/discovery/__token__/_config/size?prevExist=false
              params:
                __token__: { get_attr: [discovery_token, value] }
          token: { get_attr: [discovery_token, value] }
          value_etcd_size:
            str_replace:
              template: value=__size__
              params:
                __size__: {get_param: etcd_discovery_size}
          static_endpoint:
            str_replace:
             template: __stn__0=http://__prefix__0:2380,__stn__1=http://__prefix__1:2380,__stn__2=http://__prefix__2:2380
             params:
               __stn__: {get_param: static_name}
               __prefix__: {get_param: static_prefix}

  vulcand_proxy_group:
    depends_on: [ public_interface, etcd_discovery_group, vulcand_proxy_securitygroup, vulcand_proxy_anti ]
    type: OS::Heat::AutoScalingGroup
    properties:
      min_size: 1
      desired_capacity: { get_param: vulcand_proxy_size }
      max_size: 5
      rolling_updates: {"max_batch_size": 1, "min_in_service": 1, "pause_time": 60}
      resource:
        type: "VulcandProxy"
        properties:
          anti_affinity: { get_resource: vulcand_proxy_anti }
          key_name: { get_param: key_name }
          security_group: { get_resource: vulcand_proxy_securitygroup }
          network: { get_resource: public_network }
          subnet: { get_resource: public_subnet }
          flavor: { get_param: flavor }
          image: { get_param: image }
          instance_basename:
            str_replace:
             template: ctx%rand%-ress%
             params:
               "ctx%": {get_param: context}
               "rand%": { get_attr: [random, value] }
               "ress%": "vulcand_proxy"
          insecure: {get_param: insecure}
          vulcand_tar: {get_param: vulcand_tar}
          get_discovery:
            str_replace:
              template: http://127.0.0.1:8081/v2/keys/discovery/__token__
              params:
                __prefix__: {get_param: static_prefix}
                __token__: { get_attr: [discovery_token, value] }
          etcd_tar: {get_param: etcd_tar}
          floatingip_network_name: { get_param: floatingip_network_name }
          static_endpoint:
            str_replace:
             template: __stn__0=http://__prefix__0:2380,__stn__1=http://__prefix__1:2380,__stn__2=http://__prefix__2:2380
             params:
               __stn__: {get_param: static_name}
               __prefix__: {get_param: static_prefix}


  bastion_userdata:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        package_update: true
        package_upgrade: true
        packages:
         - curl
         - jq
        final_message: "The system is finally up, after ${UPTIME} seconds"


parameters:

  context:
    type: string
    default: ""

  key_name:
    type: string
    label: Name of keypair to assign to servers
    description: key_name=foo
    constraints:
      - custom_constraint: nova.keypair

  static_subnet_cidr:
    type: string
    default: "192.168.1.0/24"
    constraints:
      - allowed_pattern: "[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}/[0-9]{1,2}"
        description: Must be a CIDR like 192.168.1.0/24

  static_subnet_start:
    type: string
    default: "192.168.1.100"
    constraints:
      - allowed_pattern: "[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}"
        description: Must be a valid IP address like 192.168.1.200

  static_subnet_end:
    type: string
    default: "192.168.1.200"
    constraints:
      - allowed_pattern: "[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}"
        description: Must be a valid IP address like 192.168.1.200

  static_gateway_ip:
    type: string
    default: "192.168.1.254"
    constraints:
      - allowed_pattern: "[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}"
        description: Must be a valid IP address like 192.168.1.200


  discovery_subnet_cidr:
    type: string
    default: "192.168.2.0/24"
    constraints:
      - allowed_pattern: "[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}/[0-9]{1,2}"
        description: Must be a CIDR like 192.168.1.0/24

  discovery_subnet_start:
    type: string
    default: "192.168.2.100"
    constraints:
      - allowed_pattern: "[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}"
        description: Must be a valid IP address like 192.168.1.200

  discovery_subnet_end:
    type: string
    default: "192.168.2.200"
    constraints:
      - allowed_pattern: "[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}"
        description: Must be a valid IP address like 192.168.1.200

  static_gateway_ip:
    type: string
    default: "192.168.1.254"
    constraints:
      - allowed_pattern: "[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}"
        description: Must be a valid IP address like 192.168.1.200


  public_subnet_cidr:
    type: string
    default: "192.168.0.0/24"
    constraints:
      - allowed_pattern: "[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}/[0-9]{1,2}"
        description: Must be a CIDR like 192.168.1.0/24

  public_subnet_start:
    type: string
    default: "192.168.0.100"
    constraints:
      - allowed_pattern: "[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}"
        description: Must be a valid IP address like 192.168.1.200

  public_subnet_end:
    type: string
    default: "192.168.0.200"
    constraints:
      - allowed_pattern: "[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}"
        description: Must be a valid IP address like 192.168.1.200

  public_gateway_ip:
    type: string
    default: "192.168.0.254"
    constraints:
      - allowed_pattern: "[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}"
        description: Must be a valid IP address like 192.168.1.200

  discovery_gateway_ip:
    type: string
    default: "192.168.2.254"
    constraints:
      - allowed_pattern: "[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}"
        description: Must be a valid IP address like 192.168.1.200


  dns_nameservers:
    type: comma_delimited_list
    label: DNS nameservers
    description: dns_nameservers=8.8.8.8,8.8.4.4

  floatingip_network_name:
    type: string
    label: The Floating IP network for NAT
    description: floatingip_network_name=public

  flavor:
    type: string
    label: The flavor for Instances
    description: flavor=m1.medium
    constraints:
      - custom_constraint: nova.flavor

  image:
    type: string
    label: The debian image based for Instances
    description: image=debian-8-2016-01-01
    constraints:
      - custom_constraint: glance.image

  etcd_discovery_size:
    type: number
    default: 3
    constraints:
    - type: Choice
      description: must be a valid instance type
      values:
      - 3
      - 5
      - 9
    constraints:
      - range: { min: 3 }

  bastion_size:
    type: number
    default: 1
    constraints:
      - range: { min: 0, max: 2 }

  vulcand_proxy_size:
    type: number
    default: 2
    constraints:
      - range: { min: 2 }

  static_prefix:
    type: string
    default: "192.168.1.1" # [ "%s%d" for k in range(3) ]
    description: Ugly way to stay DRY
    constraints:
      - allowed_pattern: "[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,2}"
        description: Must be a custom IP address (192.168.1.1 || 192.168.1.10) && ! 192.168.1.100

  static_name:
    type: string
    default: "static"

  etcd_tar:
    type: string
    description: "https://github.com/coreos/etcd/releases/version/arch.tar.gz"

  vulcand_tar:
    type: string
    description: "https://github.com/emilevauge/traefik/releases/.../arch.tar.gz"

  insecure:
    type: string
    default: "--insecure"
    description: Warning with curl command for https


outputs:
  base_name:
    description: Random value used to tag stack resources
    value:
      - { get_attr: [random, value] }