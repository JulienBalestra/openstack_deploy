heat_template_version: 2014-10-16

description: >
  Fleet instance with role=worker

resources:
  random:
    type: OS::Heat::RandomString
    properties:
      length: 10
      sequence: lettersdigits

  port:
    depends_on: [ random ]
    type: OS::Neutron::Port
    properties:
      name:
        str_replace:
          template: bn%-rand%
          params:
            "bn%": { get_param: instance_basename }
            "rand%": { get_attr: [random, value] }
      network_id: { get_param: network }
      fixed_ips: [{ "subnet_id": { get_param: subnet } }]
      security_groups: [ { get_param: security_group } ]

  instance:
    depends_on: [ port ]
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: bn%-rand%
          params:
            "bn%": { get_param: instance_basename }
            "rand%": { get_attr: [random, value] }
      user_data_format: RAW
      user_data: { get_resource: userdata }
      key_name: { get_param: key_name }
      image: { get_param: image }
      flavor: { get_param: flavor }
      networks:
        - port: { get_resource: port }
      scheduler_hints:
        group: { get_param: anti_affinity }

      metadata:
        etcd_initial_cluster: { get_param: etcd_initial_cluster }
        fleet_state: { get_param: fleet_state }

  userdata:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        preserve_hostname: false
        manage_etc_hosts: true

        write_files:
          - path: /opt/bin/setup-etcd2-environment
            permissions: 0755
            content: |
              #!/usr/bin/env bash

              set -e ; set -o pipefail

              DEFAULT_IPV4=$(curl 169.254.169.254/1.0/meta-data/local-ipv4)

              cat << EOF | tee /etc/etcd2-environment
              ETCD_PROXY="on"
              ETCD_INITIAL_CLUSTER="$(curl http://169.254.169.254/openstack/latest/meta_data.json |
                jq -r -e .meta.etcd_initial_cluster)"
              ETCD_ADVERTISE_CLIENT_URLS="http://${DEFAULT_IPV4}:2379"
              ETCD_LISTEN_CLIENT_URLS="http://0.0.0.0:2379,http://0.0.0.0:4001"
              ETCD_LISTEN_PEER_URLS="http://${DEFAULT_IPV4}:2380,http://${DEFAULT_IPV4}:7001"
              EOF

          - path: /opt/bin/setup-fleet-environment
            permissions: 0755
            content: |
              #!/usr/bin/env bash

              set -e ; set -o pipefail

              cat << EOF | tee /etc/fleet-environment
              FLEET_METADATA="state=$(curl http://169.254.169.254/openstack/latest/meta_data.json |
                jq -r -e .meta.fleet_state),role=worker"
              EOF

              set +e

              for i in {0..10}
              do
                sleep $i
                etcdctl cluster-health && break
              done


          - path: /etc/systemd/system/fleet-zookeeper@.service
            permissions: 0644
            content: |
              [Unit]
              Description=Fleeter for Zookeeper

              Requires=fleet.service
              After=fleet.service

              [Service]
              SyslogIdentifier=%p
              WorkingDirectory=/etc/systemd/system/
              ExecStartPre=/usr/bin/fleetctl list-machines
              ExecStartPre=/usr/bin/fleetctl list-units
              ExecStart=/usr/bin/fleetctl start zookeeper@%i.service
              ExecStartPost=/usr/bin/fleetctl start zookeeper-sidekick@%i.service
              Restart=on-failure
              RestartSec=10s

          - path: /etc/systemd/system/zookeeper@.service
            permissions: 0644
            content: |
              [Unit]
              Description=Zookeeper instance

              Requires=fleet.service
              After=fleet.service

              [Service]
              SyslogIdentifier=%p
              EnvironmentFile=/etc/aci_url
              ExecStartPre=/usr/bin/curl -Ifk ${ACI_URL}/zookeeper.aci
              ExecStartPre=-/bin/rm -v /tmp/%p_%i
              ExecStartPre=/usr/bin/rkt --insecure-options=all fetch ${ACI_URL}/zookeeper.aci
              ExecStart=/usr/bin/rkt run \
                --uuid-file-save=/tmp/%p_%i quay.io/julienbalestra/zookeeper
              ExecStop=-/bin/rm -v /tmp/%p_%i
              Restart=always
              RestartSec=30s

              [X-Fleet]
              MachineMetadata=role=worker
              Conflicts=zookeeper@*

          - path: /etc/systemd/system/zookeeper-sidekick@.service
            permissions: 0644
            content: |
              [Unit]
              Description=Sidekick for zookeeper

              Requires=fleet.service
              After=fleet.service

              [Service]
              SyslogIdentifier=%p
              ExecStartPre=-/usr/bin/etcdctl rm zookeeper_%i
              ExecStartPre=/bin/ls -sl /tmp/zookeeper_%i
              ExecStart=/opt/bin/rkt-sidekick zookeeper_%i
              ExecStop=-/usr/bin/etcdctl rm zookeeper_%i
              Restart=always
              RestartSec=30s

              [X-Fleet]
              MachineMetadata=role=worker
              MachineOf=zookeeper@%i.service

          - path: /opt/bin/rkt-sidekick
            permissions: 0755
            content: |
              #! /usr/bin/env bash

              set -e

              if [ -z $1 ]
              then
                echo "give /tmp/FILENAME"
              fi

              while true
              do
                UUID=$(cat /tmp/$1)
                STATUS=$(rkt status $UUID)
                IP=$(echo $STATUS | grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')
                etcdctl set --ttl 60 $1 $IP
                sleep 30
              done

        runcmd:
          - set -x

          - systemctl daemon-reload
          - systemctl enable setup-etcd2-environment.service
          - systemctl enable setup-fleet-environment.service
          - systemctl enable etcd2.service
          - systemctl enable fleet.socket
          - systemctl enable fleet.service
          - systemctl start setup-etcd2-environment.service
          - systemctl start etcd2.service
          - systemctl start setup-fleet-environment.service
          - systemctl start fleet.service
          - ["systemctl", "start", "fleet-zookeeper@0.service"]

        final_message: "The system is finally up, after $UPTIME seconds"


parameters:
  key_name:
    type: string
    label: Name of keypair to assign to servers
    description: key_name=foo
    constraints:
      - custom_constraint: nova.keypair

  security_group:
    type: string

  network:
    type: string

  subnet:
    type: string

  image:
    type: string

  flavor:
    type: string

  anti_affinity:
    type: string

  instance_basename:
    type: string

  fleet_state:
    type: string

  etcd_initial_cluster:
    type: string
    description: "static0=http://192.168.1.10:2380,static1=http://192.168.1.11:2380,static2=http://192.168.1.12:2380"