heat_template_version: 2014-10-16

description: >
  etcd instance for static bootstrap

resources:
  port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: network }
      fixed_ips:
        - subnet_id: { get_param: subnet }
          ip_address:
            str_replace:
              template: prefix%index%
              params:
                "prefix%": { get_param: prefix }
                "index%":  { get_param: index }
      security_groups: [ { get_param: security_group } ]

  instance:
    depends_on: [ port, userdata ]
    type: OS::Nova::Server
    properties:
      key_name: { get_param: key_name }
      image: { get_param: image }
      flavor: { get_param: flavor }
      networks:
        - port: { get_resource: port }
      user_data_format: RAW
      user_data: { get_resource: userdata }
      name:
        str_replace:
         template: __name__-__index__-__token__
         params:
           __name__: {get_param: name}
           __index__: {get_param: index}
           __token__: {get_param: etcd_initial_cluster_token}
      scheduler_hints:
        group: { get_param: anti_affinity }

      metadata:
        etcd_name:
          str_replace:
            template: static__index__
            params:
              __index__: { get_param: index }
        etcd_initial_cluster_token: { get_param: etcd_initial_cluster_token }
        etcd_initial_cluster: { get_param: etcd_initial_cluster }
        etcd_initial_cluster_state: { get_param: etcd_initial_cluster_state }
        etcd_initial_cluster_ip: { get_param: etcd_initial_cluster_ip }

  userdata:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        preserve_hostname: false
        manage_etc_hosts: true

        write_files:
          - path: /opt/bin/setup-etcd-environment
            permissions: 0755
            content: |
              #!/usr/bin/env bash

              set -x ; set -o pipefail

              ETCD_DATA_DIR=/var/lib/etcd
              DEFAULT_IPV4=$(curl 169.254.169.254/1.0/meta-data/local-ipv4)

              ETCD_INITIAL_CLUSTER="$(curl http://169.254.169.254/openstack/latest/meta_data.json |
                jq -r -e .meta.etcd_initial_cluster)"

              ETCD_INITIAL_CLUSTER_IP="$(curl http://169.254.169.254/openstack/latest/meta_data.json |
                jq -r -e .meta.etcd_initial_cluster_ip)"

              ETCD_NAME=$(curl http://169.254.169.254/openstack/latest/meta_data.json |
                              jq -r -e .meta.etcd_name)

              # Check if the data-dir is empty: First boot
              if [ ! -d ${ETCD_DATA_DIR}/member ]
              then

                  # Check if there is an existing cluster
                  etcdctl --endpoints $ETCD_INITIAL_CLUSTER_IP cluster-health
                  if [ $? -eq 0 ]
                  then

                    # Check if this new member make a replacement
                    ETCD_INITIAL_CLUSTER_STATE=existing
                    REMOVE=$(etcdctl --endpoints $ETCD_INITIAL_CLUSTER_IP member list | \
                      grep "name=$ETCD_NAME" | awk 'gsub(":","") {print $1}')
                    if [ $REMOVE ]
                    then
                      etcdctl --endpoints $ETCD_INITIAL_CLUSTER_IP member remove $REMOVE && \
                        etcdctl --endpoints $ETCD_INITIAL_CLUSTER_IP member add $ETCD_NAME "http://${DEFAULT_IPV4}:2380"

                    # Check if this new member extend the orginal cluster
                    elif [[ $ETCD_INITIAL_CLUSTER != *"${ETCD_NAME}=http://${DEFAULT_IPV4}:2380"* ]]
                    then

                      ETCD_INITIAL_CLUSTER=$(etcdctl --endpoints $ETCD_INITIAL_CLUSTER_IP member list  | \
                        awk ' gsub("name=","") gsub("peerURLs","") {print $2 $3} ;  ' | \
                        sort | tr '\n' ',')
                      ETCD_INITIAL_CLUSTER="${ETCD_INITIAL_CLUSTER}${ETCD_NAME}=http://${DEFAULT_IPV4}:2380"
                      etcdctl --endpoints $ETCD_INITIAL_CLUSTER_IP member add $ETCD_NAME "http://${DEFAULT_IPV4}:2380"
                    fi

                  else
                    ETCD_INITIAL_CLUSTER_STATE=new
                  fi

                else
                  ETCD_INITIAL_CLUSTER_STATE=new
              fi

              set -e

              cat << EOF | tee /etc/etcd-environment
              ETCD_INITIAL_CLUSTER_TOKEN="$(curl http://169.254.169.254/openstack/latest/meta_data.json |
                jq -r -e .meta.etcd_initial_cluster_token)"
              ETCD_INITIAL_CLUSTER="$ETCD_INITIAL_CLUSTER"
              ETCD_INITIAL_CLUSTER_STATE="$ETCD_INITIAL_CLUSTER_STATE"
              ETCD_ADVERTISE_CLIENT_URLS="http://${DEFAULT_IPV4}:2379"
              ETCD_INITIAL_ADVERTISE_PEER_URLS="http://${DEFAULT_IPV4}:2380"
              ETCD_LISTEN_CLIENT_URLS="http://0.0.0.0:2379,http://0.0.0.0:4001"
              ETCD_LISTEN_PEER_URLS="http://${DEFAULT_IPV4}:2380,http://${DEFAULT_IPV4}:7001"
              ETCD_NAME=$ETCD_NAME
              ETCD_DATA_DIR=$ETCD_DATA_DIR
              EOF


          - path: /etc/systemd/system/fleet.service.d/10-metadata.conf
            permissions: 0644
            content: |
              [Service]
              Environment="FLEET_METADATA=role=services"

        runcmd:
          - set -x

          - systemctl daemon-reload
          - systemctl enable setup-etcd-environment.service
          - systemctl enable etcd.service
          - systemctl enable flanneld.service
          - systemctl enable setup-fleet-environment.service
          - systemctl enable fleet.socket
          - systemctl enable fleet.service
          - systemctl enable skydns.service
          - systemctl start setup-etcd-environment.service
          - systemctl start etcd.service
          - systemctl start flanneld.service
          - systemctl start fleet.service
          - systemctl start setup-fleet-environment.service
          - systemctl start skydns.service
          - systemctl start jds_kafka.service

        final_message: "The system is finally up, after $UPTIME seconds"

parameters:
  key_name:
    type: string
    label: Name of keypair to assign to servers
    description: key_name=foo
    constraints:
      - custom_constraint: nova.keypair

  security_group:
    type: string

  network:
    type: string

  subnet:
    type: string

  image:
    type: string

  flavor:
    type: string

  prefix:
    type: string

  anti_affinity:
    type: string

  index:
    type: number

  etcd_initial_cluster_token:
    type: string

  etcd_initial_cluster:
    type: string

  etcd_initial_cluster_ip:
    type: string

  name:
    type: string

  etcd_initial_cluster_state:
    type: string
    default: "new"