heat_template_version: 2014-10-16

description: >
  Build network requirements inside an empty tenant and generate an usable instance

resources:
  random:
    type: OS::Heat::RandomString
    properties:
      length: 6
      sequence: lettersdigits

  network:
    depends_on: [ random ]
    type: OS::Neutron::Net
    properties:
      admin_state_up: True
      name:
        str_replace:
          template: ctx%ress%-rand%
          params:
            "ctx%": {get_param: context}
            "ress%": "net"
            "rand%": { get_attr: [random, value] }
      shared: False

  subnet:
    type: OS::Neutron::Subnet
    depends_on: [ network ]
    properties:
      name:
        str_replace:
          template: ctx%ress%-rand%
          params:
            "ctx%": {get_param: context}
            "ress%": "subnet"
            "rand%": { get_attr: [random, value] }
      cidr: {get_param: subnet_cidr}
      network: {get_resource: network}
      allocation_pools: [{"start" : {get_param: subnet_start}, "end" : {get_param: subnet_end}}]
      dns_nameservers: {get_param: dns_nameservers}
      enable_dhcp: True
      gateway_ip: {get_param: gateway_ip}
      ip_version: 4

  router:
    type: OS::Neutron::Router
    depends_on: [ subnet ]
    properties:
      admin_state_up: True
      external_gateway_info: {"network": {get_param: floatingip_network_name}}

  interface:
    type: OS::Neutron::RouterInterface
    depends_on: [ router ]
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: subnet }

  generate_securitygroup:
      depends_on: [ random ]
      type: OS::Neutron::SecurityGroup
      properties:
        name:
          str_replace:
            template: ctx%ress%-rand%
            params:
              "ctx%": {get_param: context}
              "ress%": "generate"
              "rand%": { get_attr: [random, value] }
        rules:
          - remote_ip_prefix: {get_param: where_are_you}
            protocol: tcp
            port_range_min: 1
            port_range_max: 65535
            direction: ingress
          - remote_ip_prefix: {get_param: where_are_you}
            protocol: udp
            port_range_min: 1
            port_range_max: 65535
            direction: ingress
          - remote_ip_prefix: {get_param: where_are_you}
            protocol: icmp
            direction: ingress

  instance:
    depends_on: [ generate_securitygroup, interface, generate_userdata]
    type: "lib::FIPInstance"
    properties:
      key_name: { get_param: key_name }
      security_group: { get_resource: generate_securitygroup }
      network: { get_resource: network }
      userdata: { get_resource: generate_userdata }
      subnet: { get_resource: subnet }
      flavor: { get_param: flavor }
      image: { get_param: image }
      floatingip_network_name: { get_param: floatingip_network_name }
      instance_basename:
        str_replace:
          template: ctx%rand%-ress%
          params:
            "ctx%": {get_param: context}
            "ress%": "generate"
            "rand%": { get_attr: [random, value] }

  generate_userdata:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        package_update: true
        package_upgrade: false
        packages:
         - curl
         - jq
         - git
         - wget
         - which

        users:
          - default
          - name: etcd
            groups:
              - etcd
          - name: fleet
            groups:
              - fleet

        write_files:
          - path: /etc/systemd/system/etcd2.service
            permissions: 0644
            content: |
              [Unit]
              Description=Etcd2
              Conflicts=etcd.service

              [Service]
              SyslogIdentifier=%p
              User=etcd
              Environment=ETCD_DATA_DIR=/var/lib/etcd2
              Environment=ETCD_NAME=%m
              ExecStart=/usr/bin/etcd2
              Type=notify
              Restart=always
              RestartSec=10s
              LimitNOFILE=40000
              TimeoutStartSec=0

              [Install]
              WantedBy=multi-user.target

          - path: /etc/systemd/system/fleet.socket
            permissions: 0644
            content: |
              [Unit]
              Description=Fleet API Socket

              PartOf=fleet.service

              [Socket]
              ListenStream=/var/run/fleet.sock
              SocketMode=0660
              SocketUser=fleet
              SocketGroup=fleet

              [Install]
              WantedBy=multi-user.target

          - path: /etc/systemd/system/fleet.service
            permissions: 0644
            content: |
              [Unit]
              Description=Fleet daemon

              After=etcd2.service

              Wants=fleet.socket
              After=fleet.socket

              [Service]
              Environment=GOMAXPROCS=1
              ExecStart=/usr/bin/fleetd
              Restart=always
              RestartSec=30s

              [Install]
              WantedBy=multi-user.target

        runcmd:
          - set -x
          - mkdir -v /tmp/etcd_install || rm -Rf /tmp/etcd_install/*
          - [curl, -L, {get_param: insecure}, {get_param: etcd_tar}, -o, /tmp/etcd_install/etcd.tar.gz]
          - [cd, -P, /tmp/etcd_install]
          - [tar, -xzvf, /tmp/etcd_install/etcd.tar.gz, --strip-components=1]
          - [mv, /tmp/etcd_install/etcd, /usr/bin/etcd]
          - [mv, /tmp/etcd_install/etcdctl, /usr/bin/etcdctl]
          - mkdir -p /var/lib/etcd2 && chown -R etcd:etcd /var/lib/etcd2
          - etcd --version
          - etcdctl --version

          - mkdir -v /tmp/fleet_install || rm -Rf /tmp/fleet_install/*
          - [curl, -L, {get_param: insecure}, {get_param: fleet_tar}, -o, /tmp/fleet_install/fleet.tar.gz]
          - [cd, -P, /tmp/fleet_install]
          - [tar, -xzvf, /tmp/fleet_install/fleet.tar.gz, --strip-components=1]
          - [mv, /tmp/fleet_install/fleetd, /usr/bin/fleetd]
          - [mv, /tmp/fleet_install/fleetctl, /usr/bin/fleetctl]
          - fleetd --version
          - fleetctl --version

          - [curl, -L, {get_param: insecure}, {get_param: confd_bin}, -o, /usr/bin/confd]
          - [chmod, +x, /usr/bin/confd]
          - /usr/bin/confd --version

          - cd /etc/systemd/system
          - systemctl daemon-reload
          - ls -l

        final_message: "The system is finally up, after $UPTIME seconds"

parameters:
  context:
    type: string
    default: ""
  key_name:
    type: string
    label: Name of keypair to assign to servers
    description: key_name=foo
  subnet_cidr:
    type: string
    default: "192.168.1.0/24"
  subnet_start:
    type: string
    default: "192.168.1.100"
  subnet_end:
    type: string
    default: "192.168.1.200"
  gateway_ip:
    type: string
    default: "192.168.1.254"
  dns_nameservers:
    type: comma_delimited_list
    label: DNS nameservers
    description: dns_nameservers=8.8.8.8,8.8.4.4
  floatingip_network_name:
    type: string
    label: The Floating IP network for NAT
    description: floatingip_network_name=public
  flavor:
    type: string
    label: The flavor for Instances
    description: flavor=m1.medium
  image:
    type: string
    label: The debian image based for Instances
    description: image=debian-8-2016-01-01

  where_are_you:
    type: string
    default: "0.0.0.0/0"

  insecure:
    type: string
    default: "--insecure"
    description: Warning with curl command for https

  etcd_tar:
    type: string
    description: "https://github.com/coreos/etcd/releases/version/arch.tar.gz"

  fleet_tar:
    type: string
    description: "https://github.com/coreos/fleet/releases/version/arch.tar.gz"

  confd_bin:
    type: string
    description: "https://github.com/coreos/fleet/releases/version/arch.tar.gz"

outputs:
  base_name:
    description: Random value used to tag stack resources
    value:
      - { get_attr: [random, value] }
